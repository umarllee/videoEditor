"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadDB = void 0;
const fs_1 = __importDefault(require("fs"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const p_map_1 = __importDefault(require("p-map"));
const decompress_1 = __importDefault(require("decompress"));
const util_1 = __importDefault(require("util"));
const stream_1 = require("stream");
const log_utils_1 = require("./log-utils");
const file_utils_1 = require("./file-utils");
const streamPipeline = util_1.default.promisify(stream_1.pipeline);
const { MAXMIND_LICENSE_KEY } = process.env;
const fileLocation = file_utils_1.getDownloadFileLocation();
const unzipDb = async (editionId, suffix) => {
    const zipFilePath = file_utils_1.getZipFilePath(editionId, suffix);
    // await decompress(zipFilePath, { dir: fileLocation });
    await decompress_1.default(zipFilePath, fileLocation);
};
const getUrl = (editionId, suffix) => `https://download.maxmind.com/app/geoip_download?edition_id=${editionId}&license_key=${MAXMIND_LICENSE_KEY}&suffix=${suffix}`;
const downloadEdition = async (editionId, suffix) => {
    let endAction = log_utils_1.logAction(`Downloading DB ${editionId} - ${suffix}`);
    const cityUrl = getUrl(editionId, suffix);
    const response = await node_fetch_1.default(cityUrl);
    if (!response.ok)
        throw new Error(`unexpected response ${response.statusText}`);
    endAction();
    const zipFilePath = file_utils_1.getZipFilePath(editionId, suffix);
    endAction = log_utils_1.logAction(`Save ${editionId} zip to ${zipFilePath}`);
    await streamPipeline(response.body, fs_1.default.createWriteStream(zipFilePath));
    endAction();
    endAction = log_utils_1.logAction(`Unzip ${zipFilePath}`);
    await unzipDb(editionId, suffix);
    endAction();
};
const editionIds = [
    // ['GeoLite2-City-CSV', 'zip'],
    ['GeoLite2-City', 'tar.gz'],
    ['GeoLite2-ASN', 'tar.gz'],
];
exports.downloadDB = async () => {
    const mapper = ([editionId, suffix]) => downloadEdition(editionId, suffix);
    await p_map_1.default(editionIds, mapper, { concurrency: 1 });
};
//# sourceMappingURL=file-fetch-extract.js.map