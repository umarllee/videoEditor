"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCityLocationsByIp = exports.numberToIp = exports.ipToNumber = void 0;
const city_1 = require("../db/maxmind/city");
const ip_utils_1 = require("../ip-utils");
Object.defineProperty(exports, "ipToNumber", { enumerable: true, get: function () { return ip_utils_1.ipToNumber; } });
Object.defineProperty(exports, "numberToIp", { enumerable: true, get: function () { return ip_utils_1.numberToIp; } });
/**
 * Given a collection of IP addresses returns the country associated with each one.
 * @param ips - numeric IP addresses
 */
exports.getCityLocationsByIp = async (ips) => {
    const promises = ips.map(async (ip) => {
        var _a, _b, _c, _d;
        const ipAddress = ip_utils_1.numberToIp(ip);
        const city = await city_1.findCityByIp(ipAddress);
        const country_name = (_b = (_a = city.country.names) === null || _a === void 0 ? void 0 : _a.en) !== null && _b !== void 0 ? _b : 'unknown';
        const subdivisions = (city.subdivisions || []);
        const subdivision_1_name = subdivisions.length > 0 ? (_d = (_c = subdivisions[0].names) === null || _c === void 0 ? void 0 : _c.en) !== null && _d !== void 0 ? _d : 'unknown' : 'unknown';
        const ipCountry = {
            country_name,
            ip,
            subdivision_1_name,
        };
        return ipCountry;
    });
    const ipCountries = await Promise.all(promises);
    return ipCountries;
};
//# sourceMappingURL=index.js.map