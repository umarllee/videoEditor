"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const express_1 = __importDefault(require("express"));
const validator_1 = __importDefault(require("validator"));
const build_db_1 = require("./build-db");
const city_1 = require("./db/maxmind/city");
const asn_1 = require("./db/maxmind/asn");
const file_fetch_extract_1 = require("./file-fetch-extract");
const file_utils_1 = require("./file-utils");
const app = express_1.default();
app.get('/ip', (req, res) => {
    console.log('Invalid request:', req.path);
    return res.status(404).send({
        error: 'Missing IP address. Usage example: /ip/8.8.8.8',
    });
});
const validateIp = (req, res) => {
    const { ipAddress } = req.params;
    if (!validator_1.default.isIP(ipAddress)) {
        res.status(400).send({
            error: `Not a valid v4 or v6 IP address: ${ipAddress}`,
        });
        return null;
    }
    console.log(Date(), '=>', ipAddress);
    return ipAddress;
};
/**
 * Returns the original structure that the reader module provided.
 */
app.get('/ip/:ipAddress', async (req, res) => {
    const ipAddress = validateIp(req, res);
    if (ipAddress) {
        const cityLocation = await build_db_1.ipFinderLegacy(ipAddress);
        return res.send(cityLocation);
    }
});
/**
 * Returns all the City data from the MMDB
 */
app.get('/city/:ipAddress', async (req, res) => {
    const ipAddress = validateIp(req, res);
    if (ipAddress) {
        const city = await city_1.findCityByIp(ipAddress);
        return res.send(city);
    }
});
app.get('/asn/:ipAddress', async (req, res) => {
    const ipAddress = validateIp(req, res);
    if (ipAddress) {
        const asn = await asn_1.findAsnByIp(ipAddress);
        return res.send(asn);
    }
});
exports.main = async () => {
    file_utils_1.createDbDir();
    await file_fetch_extract_1.downloadDB();
    const p = process.env.IPAPI_PORT || '3334';
    const port = parseInt(p, 10);
    console.log(`Listening on ${port}`);
    return app.listen(port);
};
//# sourceMappingURL=index.js.map