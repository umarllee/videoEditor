"use strict";
// Prior to 2020-10 the .mmdb file was used with the reader and it mapped
// a structure that is duplicated here.
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapToLegacy = void 0;
exports.mapToLegacy = (cityLoc) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    const cityLocation = cityLoc; // || emptyCityLocation;
    const subDivisions = (cityLocation.subdivisions || []);
    const subdivisions = subDivisions.map((subDiv) => {
        var _a, _b, _c;
        return {
            geoname_id: 0,
            iso_code: (_a = subDiv.isoCode) !== null && _a !== void 0 ? _a : 'unknown',
            names: {
                en: (_c = (_b = subDiv.names) === null || _b === void 0 ? void 0 : _b.en) !== null && _c !== void 0 ? _c : 'unknown'
            },
        };
    });
    const ipInfo = {
        city: {
            geoname_id: (_a = cityLocation.city.geonameId) !== null && _a !== void 0 ? _a : 0,
            names: {
                en: (_c = (_b = cityLocation.city.names) === null || _b === void 0 ? void 0 : _b.en) !== null && _c !== void 0 ? _c : 'unknown',
            }
        },
        continent: {
            code: (_d = cityLocation.continent.code) !== null && _d !== void 0 ? _d : 'NA',
            geoname_id: 0,
            names: {
                en: (_f = (_e = cityLocation.continent.names) === null || _e === void 0 ? void 0 : _e.en) !== null && _f !== void 0 ? _f : 'unknown',
            },
        },
        country: {
            geoname_id: 0,
            iso_code: (_g = cityLocation.country.isoCode) !== null && _g !== void 0 ? _g : 'unknown',
            names: {
                en: (_j = (_h = cityLocation.country.names) === null || _h === void 0 ? void 0 : _h.en) !== null && _j !== void 0 ? _j : 'unknown',
            }
        },
        location: {
            latitude: 0,
            longitude: 0,
            metro_code: 0,
            time_zone: (_k = cityLocation.location.timeZone) !== null && _k !== void 0 ? _k : 'unknown',
        },
        postal: {
            code: (_l = cityLocation.postal.code) !== null && _l !== void 0 ? _l : 'unknown',
        },
        registered_country: {
            geoname_id: 0,
            iso_code: (_m = cityLocation.registeredCountry.isoCode) !== null && _m !== void 0 ? _m : 'unknown',
            names: {
                en: (_p = (_o = cityLocation.registeredCountry.names) === null || _o === void 0 ? void 0 : _o.en) !== null && _p !== void 0 ? _p : 'unknown',
            }
        },
        subdivisions: subdivisions,
    };
    return ipInfo;
};
//# sourceMappingURL=legacy.js.map