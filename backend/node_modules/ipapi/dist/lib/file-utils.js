"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCityDbFilePath = exports.getAsnDbFilePath = exports.findFileLocation = exports.getFileLocation = exports.createDbDir = exports.getZipFilePath = exports.getDownloadFileLocation = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const downloadFolder = 'db-dl';
exports.getDownloadFileLocation = () => path_1.default.join(__dirname, downloadFolder);
exports.getZipFilePath = (editionId, suffix) => path_1.default.join(__dirname, downloadFolder, `${editionId}.${suffix}`);
// Create "db" directory if it doesn't exist.
exports.createDbDir = () => {
    const dir = exports.getDownloadFileLocation();
    if (!fs_1.default.existsSync(dir)) {
        fs_1.default.mkdirSync(dir);
        console.log('Made dir:', dir);
    }
    else {
        console.log('Dir exists:', dir);
    }
};
exports.getFileLocation = async (folderPattern) => {
    const base = exports.getDownloadFileLocation();
    const dir = await fast_glob_1.default(base + `/**/${folderPattern}*`, {
        onlyDirectories: true,
    });
    if (dir.length === 0) {
        throw new Error(`No directory found from base: ${base}`);
    }
    dir.sort().reverse();
    return dir[0];
};
exports.findFileLocation = async () => {
    return exports.getFileLocation('GeoLite2-City-CSV_');
};
exports.getAsnDbFilePath = async () => {
    const filePath = await exports.getFileLocation('GeoLite2-ASN_');
    return path_1.default.join(filePath, 'GeoLite2-ASN.mmdb');
};
exports.getCityDbFilePath = async () => {
    const filePath = await exports.getFileLocation('GeoLite2-City_');
    return path_1.default.join(filePath, 'GeoLite2-City.mmdb');
};
//# sourceMappingURL=file-utils.js.map